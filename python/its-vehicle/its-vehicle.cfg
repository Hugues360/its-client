# Unless otherwise noted, all units are standard unit, i.e. distances
# are in meters, latitudes and longitudes in degrees, times in seconds
# and frequencies in hertz, etc...
# Sections and keys that are commented out are optional (have a default)
# while sections and keys that are not commented out are mandatory.

[general]
# Instance ID (universally unique)
instance-id = ID

# Type of ITS messages to send
# - CAM
# - VAM (not implemented)
# - CPM (not implemented)
type = CAM

# Frequency to send ITS messages
report-freq = FREQ

# How to mirror the main broker; only useful if broker.mirror:host is defined
# - with mirror-self==true:
#       when sending a message to broker.main, do not send it to broker.mirror;
#       when receiving our messages back from broker.main, mirror them to
#       broker.mirror.
# - with mirror-self==false (the default):
#       when sending a message to broker.main, send it to broker.mirror; when
#       receiving our messages back from broker.main, ignore them.
# mirror-self = BOOL

# Prefix for topics to publish on; must end with a slash, e.g.:
#   - /
#   - root/
#   - /root/
#   - deep/prefix/
#   - /deep/prefix/
topic-pub-prefix = PREFIX/

# Prefix for topics to subscribe on (see topic-pub-prefix, above)
# Note: this is also the prefix used to publish on the mirror broker
# when mirror-self==false
topic-sub-prefix = PREFIX/

# Depth of the quadkeys to generate for MQTT topics
depth = DEPTH

# Types of ITS messages to subscribe to, space separated
messages = cam cpm denm

# Depth of the quadkeys to subscribe to, for each type of message above
depth-sub-cam = DEPTH
depth-sub-cpm = DEPTH
depth-sub-denm = DEPTH

# Speeds thresholds to lower the subscription level; each threshold
# decreases the subscrption depth by one; set as many thresdholds as
# needed, at least one, separated by a space
speed-thresholds = SPEED[ SPEED [...]]

[telemetry]
# The OpenTelemetry endpoint (without the trailing /v1/traces)
endpoint = http://opentelemetry.example.com:1234
# The username and password to authenticate with against the OpenTelemetry endpoint
#username = user
#password = secret

[broker.main]
# There are two way to connect to the MQTT broker:
# - TCP/IP: set host and port, and not socket-path
# - a UNIX socket: set socket-path, not host and port
# Hostname or IP of the MQTT broker to connect to
host = HOSTNAME
# Port of the MQTT broker; default: 1883
# port = PORT
# Path of the UNIX socket
# socket-path = PATH

# Username and password to authenticate with against the broker;
# leave username empty or unset for no authentication, and leave
# password empty or unset for no password.
# username = USERNAME
# password = PASSWORD

# Client ID to connect as; default: general:instance_id
# client-id = ID

[broker.mirror]
# See broker.main, above, for descriptions
# If socket-path is not set, no mirroring is done
# socket-path = PATH
# username = USERNAME
# password = PASSWORD
# client-id = ID

[gpsd]
# Host and port gpsd listens on; defaults: 127.0.0.1, 2947
# host = HOST
# port = PORT
# How long to keep the last measurement when no new one comes (e.g. when
# in a tunnel...); default: 2.0
# persistence = SEC
# Type of heuristic to gather messages, either "order" or "timestamp";
#   "order" is almost always the most sensible (see code), default: "order"
# heuristic = TYPE
